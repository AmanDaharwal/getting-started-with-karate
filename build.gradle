buildscript {
    ext {
        gradleVersionProperty = '7.3.3'
        karateVersion = '1.1.0'
        masterThoughtVersion = '5.6.1'
        junitVersion = '5.8.2'
        commonsVersion = '2.7'
        junitPlatformsLauncherVersion = '1.8.2'
        commonsLang3Version = '3.12.0'
    }
    repositories {
        maven { url 'https://plugins.gradle.org/m2/' }
    }
}

plugins {
    id 'project-report'
    id 'eclipse'
    id 'java'
    id 'idea'
}

project.ext.logDir = "${rootDir}/reports"

group 'com.znsio.getting-started-with-karate'
version '0.0.1'

sourceCompatibility = 11

repositories {
    mavenLocal()
    mavenCentral()
}

sourceSets {
    test {
        resources {
            srcDir file('src/test/java')
            exclude '**/*.java'
        }
    }
}

dependencies {
    implementation "com.intuit.karate:karate-core:${karateVersion}"
    implementation "com.intuit.karate:karate-junit5:${karateVersion}"
    implementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    implementation "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    implementation "net.masterthought:cucumber-reporting:${masterThoughtVersion}"
    implementation "org.apache.commons:commons-lang3:$project.commonsLang3Version"
    implementation "org.junit.platform:junit-platform-launcher:${junitPlatformsLauncherVersion}"
}
//
//task karateExecute(type: JavaExec) {
//    classpath = sourceSets.test.runtimeClasspath
//    mainClass = 'com.intuit.karate.cli.Main'
//}

task karateDebug(type: JavaExec) {
    classpath = sourceSets.test.runtimeClasspath
    mainClass = 'com.intuit.karate.cli.Main'
}

test {
    useJUnitPlatform()
    // Pull karate options into the runtime
    systemProperty "karate.options", System.properties.getProperty("karate.options")
    // Pull karate options into the JVM
    systemProperty "karate.env", System.properties.getProperty("karate.env")

    include '**/*Test*'

    // Ensure tests are always run
    outputs.upToDateWhen { false }

    // attach debugger
    if (System.getProperty('debug', 'false') == 'true') {
        jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=9009'
    }

}

clean.doFirst {
    delete "${rootDir}/target"
    delete "${rootDir}/bin"
    delete "${rootDir}/build"
    delete "${rootDir}/out"
    delete "${rootDir}/reports"
    println "Clean: Deleted bin, build, out, target and reports directories"
}

clean.doLast {
    mkdir "${rootDir}/reports"
    println "Created reports directory"
}

jar {
    manifest {
        attributes "Main-Class": "com.znsio.FatJarRunner"
    }
    from { configurations.testRuntime.collect { it.isDirectory() ? it : zipTree(it) } }
    from sourceSets.test.output
    from('.') { include 'gradle/**/*' }
    from('.') { include 'gradlew*' }
    from('.') { include 'build.gradle' }
    destinationDir file("${rootDir}/upload")
    doLast {
        println "Created jar: ${rootDir}/upload/${project.name}-${project.version}.jar"
    }
}

task copyToUpload(type: Copy) {
    from 'java/test_data.json'
    into 'upload/src/test/java'
}

test.dependsOn clean
jar.dependsOn clean
jar.finalizedBy copyToUpload

wrapper {
    gradleVersion = gradleVersionProperty
}
